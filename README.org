#+TITLE: [[images/logo64.png]] matrix-client.el

This is a fork of the [[http://doc.rix.si/projects/matrix.el.html][original matrix.el client]] with the intent of maintaining
it further, fixing bugs, and providing long-term goals for the project.

[[https://i.imgur.com/VlzRtEz.png][https://i.imgur.com/VlzRtEz.png]]

* Installation

~matrix-client~ can only be installed manually. Simply put this directory onto
your load path, and ~(require 'matrix-client)~. Once the project achieves a
sufficiently high quality or demand, it may be submitted to melpa.

When installing manually, you will need to ensure all dependencies are also
installed properly.

** Quelpa

#+BEGIN_SRC emacs-lisp
  (quelpa '(matrix-client
            :fetcher github
            :repo "jgkamat/matrix-client-el"))
#+END_SRC

* Usage

Either deploy your own homeserver or register account on the public homeserver
https://matrix.org/beta/#/login . After you've done that, =M-x matrix-client=
will set you up with buffers corresponding to your Matrix rooms. You can join
new ones with /join, leave with /leave or /part, and hook in to the custom
functions provided by =matrix-client=.

* Configuration

While there are a lot of configuration settings, here are a selection that are
the most useful:

| Variable                          | Description                           |
|-----------------------------------+---------------------------------------|
| ~matrix-client-show-images~       | Control if images are shown inline    |
| ~matrix-client-render-presence~   | Control display of presence           |
| ~matrix-client-render-membership~ | Control display of membership changes |
| ~matrix-client-use-tracking~      | Enable tracking.el integration        |

Many more settings are documented through customize.

** Use with [[https://github.com/alphapapa/frame-purpose.el][frame-purpose]]

~frame-purpose~ works well with this package.  For example, this code:

#+BEGIN_SRC elisp
  (frame-purpose-make-frame
   :modes '(matrix-client-mode)
   :title "Matrix"
   ;; Note the path to the logo.png file from the matrix-client.el repo.
   :icon-type (expand-file-name "~/src/emacs/matrix-client.el/images/logo.png")
   :sidebar 'right
   :buffer-sort-fns (list (-on #'string< #'buffer-name)
                          (-on #'> (lambda (buffer)
                                     ;; Sort by most recent event in room.
                                     (or (when-let* ((room (buffer-local-value 'matrix-client-room buffer))
                                                     (last-event (car (oref* room timeline))))
                                           (a-get* last-event 'origin_server_ts))
                                         0)))
                          (lambda (a b)
                            ;; Sort modified rooms first (i.e. rooms with unseen events).
                            (and (buffer-modified-p a)
                                 (not (buffer-modified-p b))))))
#+END_SRC

...can be used to get a window like this:

[[images/frame-purpose-example.png]]

* Contributing

Contributions are much appreciated, and what help this project stay afloat! If
you have an issue, please report it via [[https://github.com/jgkamat/matrix-client-legacy-el/issues][github issues]]. If you have a patch, you
may submit it via [[https://github.com/jgkamat/matrix-client-legacy-el/pulls][a pull request]].

A room for discussion is located at [[https://matrix.to/#/#matrix-client-el:matrix.org][#matrix-client-el:matrix.org]]

Development alerts are available at #matrix-client-el-dev:matrix.org.

* Authors

- [[http://whatthefuck.computer/][Ryan Rix]] - Created the initial matrix-client.el.
- [[https://github.com/alphapapa][alphapapa]] - Images, Performance optimizations, Last seen tracking, and a shiny
  new backend!
- [[https://jgkamat.github.io/][jgkamat]] - Maintenance and reviews.

* License

See LICENSE in the root of the repository for legal information.
